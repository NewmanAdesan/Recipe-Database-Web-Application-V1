

STEP 1: THE HEADER LAYOUT
STEP 2: THE HEADER COMPONENT STYLING
STEP 3: THE HEADER COMPONENT INTERACTION (PAGE THEME LOGIC)



STEP 1: THE HEADER LAYOUT

    The Header   
    the header container is a flex-box that constitute 4 items
        - the Logo
        - the Navigation links
        - the Theme Switch button
        - the Saved Recipe button

    The Logo
        - the logo container is a link to the homepage (href='/')
        - the logo container encapsulate two images. both are the same logo but with different colors
        - when the website is in light-theme mode, only one logo image displays (the light-theme-logo)
        - when the website is in dark-theme mode, only one logo image displays (the dark-theme-logo)
        - the logo images have a width of 156 pixel & a height of 32 pixel

    The Navigation links
        - the navigation link container is hidden for mobile view.
        - there are two links in the navigation container "Home" & "Recipes".
        - the links font-size category is "title-small".
        - the link that is active has a special style; an orange underline.
        - when the UNACTIVE LINK is hovered upon, its background color transition to a color called 'alpha-10'.

    The Theme Switch Button
        - the button container encapsulate two material icon.
        - when the website is in light-theme mode, only one material icon displays (the light-theme-icon).
        - when the website is in dark-theme mode, only one material icon displays (the dark-theme-icon).
        - when the button is hovered on, its background color transition to a color called 'alpha-10'.
        - the theme switch button is a style component called "icon-button".
        - the material icons have an aria-hidden of true
        - the button container have an aria-pressed of false
        - the button container have an aria-lable of 'Toggle Light & dark Theme'

    The Saved Recipe button
        - the container is a link to the page with all the saved recipe (href='/saved-recipes.html').
        - the container encapsulates 2 items "a material icon" & "a Saved Recipes text".
        - the container is a style component called "btn".
        - the container is a style component called "btn-primary".
        - the material icon have an aria-hidden of true.






STEP 2: THE HEADER COMPONENT STYLING

    THE HAS-STATE INTERACTION
        Concept
            - we would encapsulate an interaction into the 'has-state class'.
            - in the Header UI, each nav link & the icon button has this interaction.
            - for the implementation of this interaction we will utilize the 'after pseudo-element' 
            - such that where the element with the 'has-state class' is in hover state or focus-visible state and not active state, its background color will be the variable 'alpha-10'
            - where are we particular about the 'not active state'. 
                - because this class will be placed on the navigation link; 
                - but we want this background color transition to apply to the link that is not currently active

        Implementation
            - the has-state element is given a relative position, hidden overflow
            - the has-state element after pseudo-element is given an empty content, absolute position with zero inset, short transition
            - utilizing the WHERE & NOT PSEUDO-CLASSES; when the has-state element is in 'hover state' or 'focus-visible state' NOT 'active state', the has-state element after pseudo-element background-color will change to 'alpha-10 variable'

        Style Category
            - Reusable


    THE MATERIAL ICON SETTING
        Concept
            - utilizing the material icon cdn, we can use their icon in our html code
            - in the Header UI, we have two of this icons
            - to do so, we encapsulate the icon-name in a span element & give it the 'material-symbols-outlined class'.
            - now we want to style the size, font-variation-settings & display of the icons. we do this using the 'material-symbols-outlined class'

        Implementation
            - display settings to block display, hidden overflow
            - size settings to 1em width, 1em height
            - with knowledge from material icon documentation, font-variation-settings to 0 FILL, 400 wght, 0 GRAD, 24 opsz

        Style Category
            - Reusable


    THE ICON BUTTON STYLE COMPONENT
        Concept
            - an icon button is a button that encapsulate a material icon
            - we have this buttons in several UI of our application. the Header UI has one of this type of button.
            - we want to style all this button in the same way therefore we would utilize the "icon-btn class"
            - we would encapsulate a styling for a button in the "icon-btn class".

        Implementation
            - display settings to grid display, center place-items
            - size settings to 40 pixel width, 40 pixel height
            - color settings to `primary-container` background color
            - box styling to `radius-circle` border radius

        Style Category
            - Component -> icon button


    THE BUTTON STYLE COMPONENT
        Concept
             - there are buttons spread across our pages and we want to style them in a specific way
             - we encapsulate this styling in the 'btn class'
             - some of this kind of button have icons in them tagged via the 'has-icon class'. DO NOTE THEY ARE DIFFERENT FROM ICON BUTTONS
             - buttons with the 'btn class' & 'has-icon class' has a slightly different box styling setting

        Implementation
            - display settings to flex display, center align-items, center justify-content, 8 pixel gap.
            - size settings to 40 pixel height, max-content max width
            - box settings to radius-4 border radius, 24 pixel inline padding
            - interaction settings to `short transition`
            - box settings of button that has icon ('btn has-icon') to 16 pixel start inline padding

        Style Category
            - Component -> button


    THE PRIMARY BUTTON STYLE COMPONENT
        Concept
            - there are buttons ('btn class') that are regarded as primary buttons basically because of their color setting; they use a primary color of the site
            - we want to style the coloring of this buttons differently therefore, we encapsulate this styling in a 'btn-primary class'

        Implementation
            - color settings to `primary` background color, white text color
            - color setting when in 'hover state' OR 'focus-visible state' does not apply to 'active state' to `primary hover` background color.

        Style Category
            - Component -> primary button


    THE SECONDARY BUTTON STYLE COMPONENT
        Concept
            - there are buttons ('btn class') that are regarded as primary buttons basically because of their color setting; they use a secondary color
            - we want to style the coloring of this buttons differently therefore, we encapsulate this styling in a 'btn-secondary class'

        Implementation
            - color settings to `primary-container` background color  

        Style Category
            - Component -> secondary button

    
    THE MOBILE HEADER STYLING
        Concept
            - using a mobile first approach, the header by default will be in its mobile form.
            - in mobile, the navbar & primary button in the header will be hidden
            - in mobile, dark theme items in the header WILL HAVE NO DISPLAY when they have an ancestor with the attribute data-theme set to 'light'
            - in mobile, light theme items itn the header WILL HAVE NO DISPLAY when they have an ancestor with the attribute data-theme set to 'dark'
            - the header element is going to be styled via the "header class"

        Implementation
            - display settings to flex display, center align-items, 8 pixel gap
            - position settings to fixed position, 0 top, 0 left, 4 z-index
            - size settings to 100 percent width, `header-height` height
            - color settings to `background variable` background color
            - box settings to 8 pixel padding, 1 pixel solid border with `primary-container` color

        Style Category
            - Header UI






STEP 3: THE HEADER COMPONENT INTERACTION (PAGE THEME LOGIC)

    Concept
        - the theme switch icon is placed in the Header so let's talk about the page theme logic.
        - the `data-theme attribute` of the html element sets the theme of the page.
        - the current theme of the page will be stored in the session storage since this information will be needed by the 4 pages of the web application.
        - the `theme.js script` placed in the `head element` takes care of the theme logic of the page.
        - the theme.js script does three things:
            - sets the `data-theme` based on the theme value in the session storage
            - sets the `data-theme` based on the window prefers-color-scheme IF NO THEME VALUE IN SESSION STORAGE
            - sets a click event handler on the theme switch button
        - the click event handler does three things:
            - set the `aria-pressed attribute` of the button to its complement
            - set the `data-theme attribute` of html to its complement
            - set the `theme key` of the session storage to the `data-theme attribute`

    Implementation
        - inside the theme.js script
        - set the NodeElement variable `HTML` which corresponds to the html element `const /** NodeElement **/ $HTML = document.documentElement`
        - set the boolean variable `isDark` which corresponds to if the window prefers-color-scheme is dark; this is inspected using the window match media function `window.matchmedia("(prefers-color-scheme:dark)").matches`
        - set the data-theme of the html element to the session storage theme value IF SESSION STORAGE HAVE THE ITEM THEME; `$HTML.dataset.theme = sessionStorage.getItem("theme")`
        - set the data-theme of the html element to 'dark' IF isDark IS TRUE OTHERWISE SET TO 'light'
        - add a load event handler to the window element
            - set the NodeElement variable `themeBtn` to the button element `document.querySelector('[data-theme-switch]')
            - add a click event handler on the themeBtn
                - set the boolean variable `ariaPressed` to the ariaPressed attribute of the button element `let /** Boolean **/ $ariaPressed = this.getAttribute("aria-pressed")`
                - set the `aria-pressed attribute` of the button element to the complement of `ariaPressed variable` `this.setAttribute("aria-pressed", !ariaPressed)`
                - set the `data-theme` of the html element to 'light' if the value is 'dark' else set to 'dark' `$HTML.dataset.theme = $HTML.dataset.theme==="dark" ? "light" : "dark"`
                - set the `theme key` of the session Storage `sessionStorage.setItem("theme", $HTML.dataset.theme)`






STEP 4: THE MOBILE NAVIGATION LAYOUT
    
    Concept
        - the navigation is implemented with an unordered list with three list item 'Recipes Link', 'Home Link' & 'Saved Link'
        - the list items are actually links to a page of the web application
        - the list items link contains two things the item-icon & the item-text
        - the item icon is a container that encapsulates a material icon which is centered in it
        - the item-text font size category is label-medium
        - the active list item link has an aria-current of true
        - the navigation container has an aria-label of `primary`
        - the material icon has an aria-hidden of true 
        
    Implementation
        - therefore a 'nav element' encapsulate a 'ul element' which encapsulate '3 li elements'
        - the li elements encapsulate an 'anchor element'. the anchor element encapsulate '2 span elements'
        - the span element for the item-icon & the span element for the item-text
        - the item-icon span element encapsulates the 'material icon span element'.
        - the item-text span element has a 'label-medium class'
        - the nav element has an aria-label of `primary`
        - the material icon span element has an aria-hidden of true.
        - the 'anchor element' that is active has an aria-current of true.



        


STEP 5: THE MOBILE NAVIGATION STYLING

    Specification
        - we want the mobile navigation to be position at the bottom of the screen and be a certain height and viewport width
        - we want the mobile navigation to have a top & bottom padding
        - we want the navigation links to occupy equal width space
        - we want the navigation link content to be centered
        - we want the navigation link icon container to have a grayish background color when the navigation link is hovered upon
        - we want the active navigation icon container to have a different background color
        - we want the active navigation icon container material icon to have a 100 percent FILL

    Concept
        - the nav element via the 'mobile-nav class' specifies the positioning, size, box styling & colouring of the mobile navigation, 
        - the ul element via the 'nav-list class' specifies display; since we want the link to occupy equal width space, we utilize the `1fr concept` in grid display.
        - the ul element via the 'nav-list class' also specify the a center text align
        - the first span element via the 'item-icon class' specifies the box styles of the icon container, using an auto margin-inline for centering.
        - the anchor element via the 'nav-link class', we can check the hover & focus visible state
        - the anchor element via the 'nav-link class', we can check if it has the attribute 'aria-current=true'

    Implementation
        - via the 'mobile-nav class'
        - set the position settings to bottom position, zero left, zero bottom, four z-index.
        - set the size settings to 100 percent width, mobile-nav-height variable as height
        - set the box settings to 12 pixel by 16 pixel block padding, 'shadow-1' box shadow
        - set the color settings to 'primary-container' background color, 'on-background-variant' text color

        - via the 'nav-list' class
        - set the display settings to grid display, 1fr x 3 grid template column
        - set the text settings to center text align

        - via the 'item-icon' class
        - set the size settings to 64pixel width, 32pixel height
        - set the display settings to grid display, center place-items
        - set the box setting to 8pixel border radius, auto margin inline, 4pixel margin bottom
        - set the transition setting to short transition

        - where the 'nav-link' of the 'mobile-nav' is in hover state, focus-visible state, set the 'item-icon' color settings to alpha-10 background color
        - when the 'nav-link' of the 'mobile-nav' have attribute aria-current=true, set the 'item-icon' color settings to active-indicator background color
        - when the 'nav-link' of the 'mobile-nav' have attribute aria-current=true, set the 'material-symbols-outlined class' font variation settings to 'FILL' 1

    Style Category
        - Mobile Nav UI



        


STEP 6: THE BANNER COMPONENT LAYOUT
    Concept
        - the main element: this encapsulates the article element.
        - the article element: this encapsulates all components in the body of the page.
        - the banner component: a section element. It's the first child of the article element. it has a 'banner' aria-label
        - the banner-card component: a div element. it is within the banner component. it encapsulates 3 items 'a title', 'a search component', 'a label'. it has a background image
        - the banner title: an h1 element.
        - the banner search component: a div element. it encapsulates 3 items 'an icon', 'an search input', 'a search button'
            - the banner search component icon: a span element. it has a true aria-hidden
            - the banner search component input: an input element. it has a 'search' type. it has a 'search' name. it has a 'Search Recipe' placeholder & a 'Search Recipe' aria-label.
            - the banner search component button: a button element. it has a 'Submit' aria label. it encapsulates a search material icon(span elemet) which has a true aria-hidden.
        - the banner search label: a p element.



        

STEP 7: THE BANNER COMPONENT STYLES

    Specification
        - the banner component (banner class)
                - it occupies the full width of the page
                - it has a bit of inline padding.

        - the banner card component (banner-card class)
                - it has a set height.
                - it has a background image & a background color for fallback.
                - it's children vertically centered
                - it has a bit of inline padding
                - it has a slight border radius

        - the banner title 
                - it is centered in the banner component
                - it has a display-large font setting via the 'display-large class'

        - the banner label 
                - it is centered in the banner component
                - it has a font-setting of label-medium via the 'label-medium class'

        - the banner search component (search-wrapper class)
                - it occupies the full content-width of the banner card component.
                - it has a maximum width.
                - it is centered in the banner component.
                - it's height is set by the search input child
                - it has a top margin & bottom margin.
                - it's icon & search button are removed from the flow & position on the search input via the 'search-icon class' & 'search-submit class' respectively
                - the search input has a body-medium font setting
                
        - the banner search component button (search-submit class)
                - it has a short transition
                - it has an hover interaction wherein its background transitions.


    Implementation
        - the banner class
        - size setting to 100 percent width
        - box setting to 16px inline padding

        - the banner-card class
        - display settings to grid display, center place-content, 1fr grid-template-column
        - size setting to 480px height.
        - background setting to hero-banneer-small.jpg background-image, no-repeat background-repeat, image-background background-color, center background-position, cover background size
        - box setting to 20px inline padding, 4px border-radius
        - text settings to center text-align, white text-color

        - the search-wrapper class
        - position settings to relative position, hidden overflow
        - size settings to 100% width, 480px max-width
        - box settings to auto inline-margin, 16px margin-block-start, 12px margin-block-end.
        - color settings to on-background text-color

        - the search-icon class
        - position settings to absolute position, 50% top, 16px left, -50% translateY transform, 1 z-index

        - the search-input class
        - size settings to 56px height, 100% width
        - box setting to 56px inline-padding, no outline.
        - background settings to primary-container background color
        
        - the search-submit class
        - position settings to absolute position, 2px top, 2px right, 2px bottom,
        - display settings to grid display, center place-content
        - size settings to 48px width
        - background settings to primary background color
        - box settings to 4px border radius
        - color settings to white color.
        - interaction settings to short transition
        - where hover interaction, focus-visible interaction not active, set to primary-hover background color.

    Style Category
        - Hero UI









        

STEP 7: THE MEAL-TYPE TAB COMPONENT LAYOUT

    Concept
        - basically this component is a tablist component.
        - this means we have a list of buttons called tabs which controls a panel to display when they are clicked.
        - thus we will place a button for each tab in a div element acting as our tab-list
        - we will place this tab-list container in a parent container.
        - the panel corresponding to each tab will be siblings of this tab-list container as they dwell in the parent container

    Implementation
        - the meal-type tablist is another section in the article container,
        - in the section is a div element with a container class which act as the container of content to giving it basically an inline padding.
        - in the container is our tab-list container, with the role of tablist, with the aria-label of Meal Type
        - in our tab-list container, we have buttons 
            - with a TITLE-SMALL font settings, 
            - with the role of tab, 
            - with a tabindex attribute, 
            - with an aria-selected attribute, 
            - with an aria-controls attribute, 
            - with an id attribute, 
            - with a text content, 
            - with the has-state interaction
            - 
            - 
            - the first button has aria-controls of panel-1, id of tab-1, text of "Breakfast", tabindex of 0, aria-selected of true
            - the second button has aria-controls of panel-2, id of tab-2, text of "Lunch", tabindex of -1, aria-selected of false
            - the third button has aria-controls of panel-3, id of tab-3, text of "Dinner", tabindex of -1, aria-selected of false
            - the fourth button has aria-controls of panel-4, id of tab-4, text of "Snack", tabindex of -1, aria-selected of false
            - the fifth button has aria-controls of panel-5, id of tab-5, text of "Teatime", tabindex of -1, aria-selected of false
        - in the container, after the tab-list container lie all our tab panels, 
            - with a role of tabpanel, 
            - with an id attribute, 
            - with an aria-labelledby attribute, 
            - with a tabindex of 0, 
            - with an hidden attribute, 
            - with a text-content (for now, later it will have recipe cards)
            - 
            - 
            - the first panel has an id of panel-1, an aria-labelledby of tab-1, tabindex of 0, no hidden attribute
            - the second panel has an id of panel-2, an aria-labelledby of tab-2, tabindex of 0, an hidden attribute
            - the third panel has an id of panel-3, an aria-labelledby of tab-3, tabindex of 0, an hidden attribute
            - the fouth panel has an id of panel-4, an aria-labelledby of tab-4, tabindex of 0, an hidden attribute
            - the fifth panel has an id of panel-5, an aria-labelledby of tab-5, tabindex of 0, an hidden attribute









        

STEP 8: THE MEAL-TYPE TAB COMPONENT STYLING
        


CONCEPT
    - the meal-type tab is not the only tab component in our page.
    - therefore it makes sense to style the tab-list container under a class called 'tab-list' 
    - and the tab-list container buttons under a class called 'tab-btn' 
    - we would also placing their styling semantically under the category of #COMPONENT: SECONDARY TAB

    - in the semantic #CONTAINER category
    - the section element via the section class will have a bottom margin
    - the div element via the container class will give the section have an inline padding, width & max-width

    - the tab-list container is obviously a horizontal flex-box with an underline & scrollable but hidden scroll-bar
        - we will use a box shadow for this, such that the 1px underline is inset in the container
        - this is because the tab-buttons will have a border bottom of 2px & we want it to align nicely with the tab-list underline
    - the tab-buttons will have an height, an inline padding & a transparent border bottom.
    - the tab-button with true aria-selected will be styled different. 

    - in the semantic #TAB category 
    - we will apply sticky positioning and a background color to the tab list to prevent see-through overlap with other elements.. 
    - we also want the tab list width to match the container (.container) width. 
        - like remember it is in a div element with the container class with gives the content an inline padding
        - we do not want this inline padding to affect the tablist container 
        - thus we adding negative margin-inline equal to the container's padding 
        - then we set inline padding for the tab list, maintaining the appearance of unaffected padding. 

        - we do not want to just remove the container class since this will also remove the inline padding 
          because apart from the padding, the container also offer a 100% width & max-width to each section
          also in this section we have tab-list & tab-panels & we want to make sure the inline padding still applies to the tab-panels

IMPLEMENTATION
    - the section class
    - box settings of var-section-gap margin-block-end

    - the container class

    - the tab-list class (component category)
    - display settings to flex display
    - color settings to on-background-variant text color 
    - box settings to a box-shadow of inset 0 -1px 0 outline-coloring
    - overflow settings to auto overflow-x, a scrollbar-width of none to hide the scrollbar (for firefox browsers), no display for webkit-scrollbar pseudo-element (for webkit browsers)
    
    - the tab-btn class
    - display settings of 1 0 80px flex
    - size settings of 48px height,
    - box settings of 24px inline-padding,  2px solid transparent border-block-end
    - where in hover-state or in focus-visible-state, alpha-10 background color

    - the tab-btn with true aria-selected attibute
    - color settings of var-on-background text-color, var-primary border-color

    - the tab-list class in the tab class (tab category) (tab tab-list)
    - the section element also have the tab class
    - position settings of sticky position, var-header-height top, 1 z-index
    - color settings of var-background background color
    - box settings of -16px margin-inline, 16px padding-inline, 16px 12px margin-block,.

    - the tab-panel with hidden attibute
    - display settings to none display. 

    all section element via the section class have a margin-block-end of the section-gap variable.
    the page container via the container class have a width of 100%, a max-width of 1130px, a margin-inline of auto, a padding-inline of 16px
    the section & container styling


INTERACTION
    in the home js file we have the functionality 'HOME PAGE SEARCH'
    basically when the search button in the banner component is clicked,
    it gets the value of the search input and set the url of the window to the recipes page, passing in the url the search input value via a search-paramter called 'q' i.e `/recipes.html?q=${searchInputValue}`
    thus for this implementation 3 major tools:
    'the search button element'
    'the search input element'
    'the window.location api'

    in the homepage, we have another functionaliy 'SEARCH ON ENTER KEY' basically search submit when the Enter key is pressed. we simple place a keydown event handler on the search input, if the key listened to is the Enter key we programmatically click on the search button.

    in the homepage, we have another functionality 'TAB PANEL NAVIGATION'
    obtain all tab-btn.
    obtain all tab-panels
    get the first tab-btn named as lastActiveBtn (this button is tagged with a true aria-selected attribute & tabIndex of 0)
    get the second tab-panels named as lastActivePanel (the panel element is tagged with a hidden attibute)
    place a click event on all tab-btn which does 3 things
        make the last active button & panel in-active
        make the current active button & current active panel
        make the lastActiveBtn & lastActivePanel variable refer to the current active button & current active panel
    this implementation makes use of the 'getAttribute', 'setAttribute', 'removeAttribute' functions
    also in global.js we add the 'addEventOnElements Method' to the windows object which takes in the NodeList, the eventType & the callbackFunction this way we can call it directly in home.js (by directly i mean as if it was a function defined in home.js) 

    in the homepage, we have another functionality 'TAB NAVIGATION WITH ARROW KEY'
    add keydown event on all the tab buttons
    get the Next Element Sibling of the button in question
    get the Previous Element Sibling of the button in question
    if the key is an ArrowRight key, the button in question tabindex is changed to -1 & then next Element Sibling of the button tabindex is changed to 0 and finally place focus on it.
    if the key is ArrowLeft, the button in question tabindex is changed to -1 & then prev Element Sibling of the button tabindex is changed to 0 and finally place focus on it.
    if the key is Tab, the button in question tabindex is changed to -1 & then the focus is placed back at the last active button
                  


